version: '3.9'
services:
  command-app:
    depends_on:
      - mongo
      - rabbitmq
    image: command-app
    container_name: command-app
    build:
      context: ./
      dockerfile: inventory-command.dockerfile
    restart: always
    ports:
      - "${COMMAND_PORT}:${COMMAND_PORT}"
    environment:
      MONGO_DB_HOST: mongo
      MONGO_DB_PORT: ${MONGO_DB_PORT}
      MONGO_DB_USER: ${MONGO_DB_USER}
      MONGO_DB_PASSWORD: ${MONGO_DB_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_DB_URI: mongodb://${MONGO_DB_USER}:${MONGO_DB_PASSWORD}@mongo:${MONGO_DB_PORT}/${MONGO_DB_NAME}?authSource=${MONGO_DB_AUTH_SOURCE}
      RMQ_URI: amqp://root:password@rabbitmq:5672
    links:
      - mongo
      - rabbitmq
    volumes:
      - inventory-app:/command-app

  query-app:
    depends_on:
      - postgres
      - rabbitmq
    image: query-app
    container_name: query-app
    build:
      context: ./
      dockerfile: inventory-query.dockerfile
    restart: always
    ports:
      - "${QUERY_PORT}:${QUERY_PORT}"
    environment:
      POSTGRES_DB_HOST: postgres
      POSTGRES_DB_PORT: ${POSTGRES_DB_PORT}
      POSTGRES_DB_USER: ${POSTGRES_DB_USER}
      POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      RMQ_URI: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:${RABBITMQ_DEFAULT_PORT}
      JWT_SECRET: ${JWT_SECRET}
    links:
      - postgres
      - rabbitmq
    volumes:
      - inventory-app:/query-app

  proxy-app:
    depends_on:
      - rabbitmq
    image: proxy-app
    container_name: proxy-app
    build:
      context: ./
      dockerfile: inventory-proxy.dockerfile
    restart: always
    ports:
      - "${PROXY_PORT}:${PROXY_PORT}"
      - 81:81
    environment:
      RMQ_URI: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:${RABBITMQ_DEFAULT_PORT}
    links:
      - rabbitmq
    volumes:
      - inventory-app:/proxy-app

  auth-app:
    depends_on:
      - postgres
      - rabbitmq
      - command-app
    image: auth-app
    container_name: auth-app
    build:
      context: ./
      dockerfile: inventory-auth.dockerfile
    restart: always
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    environment:
      POSTGRES_DB_HOST_AUTH: postgres
      POSTGRES_DB_PORT_AUTH: ${POSTGRES_DB_PORT_AUTH}
      POSTGRES_DB_USER_AUTH: ${POSTGRES_DB_USER_AUTH}
      POSTGRES_DB_PASSWORD_AUTH: ${POSTGRES_DB_PASSWORD_AUTH}
      POSTGRES_DB_NAME_AUTH: ${POSTGRES_DB_NAME_AUTH}
      RMQ_URI: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:${RABBITMQ_DEFAULT_PORT}
      JWT_SECRET: ${JWT_SECRET}
    links:
      - postgres
      - rabbitmq
      - command-app
    volumes:
      - inventory-app:/auth-app

  postgres:
    image: eduarandres/postgres-app:latest
    # image: postgres-app
    container_name: postgres
    ports:
      - "${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}"
    restart: always
    command:
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER_AUTH}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD_AUTH}
      # POSTGRES_DB: inventory
      DB_NAMES: "inventory,auth"
    volumes:
      - data-postgres:/var/lib/postgresql/data

  mongo:
    image: eduarandres/mongo-app:latest
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: inventory
    volumes:
      - data-mongo:/data/db

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - data-rabbitmq:/var/lib/rabbitmq

volumes:
  data-postgres:
    name: data-postgres
    driver: local
  data-mongo:
    name: data-mongo
    driver: local
  data-rabbitmq:
    name: data-rabbitmq
    driver: local
  inventory-app:
    name: inventory-app
    driver: local
  auth-app:
    name: auth-app
    driver: local

# docker-compose --env-file ./environments/.env.dev build
# docker-compose --env-file ./environments/.env.dev up -d